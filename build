#!/usr/bin/env perl

use 5.034;
use if !$ENV{GITHUB_WORKSPACE}, "local::lib";
use DateTime ();
use DateTime::Format::Mail;
use File::Spec::Functions ();
use List::Util qw( min );
use Template;
use Time::Local qw( timelocal );
use XML::RSS;

chomp(my $project_root = $ENV{GITHUB_WORKSPACE} || `git rev-parse --show-toplevel`);

my $output_dir = $ARGV[0] || '_site';

my $config = {
    INCLUDE_PATH => "$project_root/templates",  # or list ref
    OUTPUT_PATH  => "$project_root/$output_dir",
    INTERPOLATE  => 1,               # expand "$var" in plain text
    POST_CHOMP   => 1,               # cleanup whitespace
    PRE_PROCESS  => 'header',        # prefix each template
    POST_PROCESS => 'footer',        # append after each template
    EVAL_PERL    => 1,               # evaluate Perl code blocks
};

# create Template object
my $template = Template->new($config);

# find articles
my $max_articles = 5;
my $article_dir_name = 'articles';
my @article_dirs = &directories_in($article_dir_name);
my @articles = &find_pages(\@article_dirs);
my @first_articles = @articles[0..min($max_articles - 1, $#articles)];

# define template variables for replacement
my $root_url = 'https://cberes.com';
my $root_title = 'cberes';
my $vars = {
    title => $root_title,
    pages => \@first_articles,
    more_articles => (scalar @articles) > $max_articles,
};

# root index.html
my $input = 'index.html';
my $output = $input;

open my $input_file, '<', $input;
$template->process($input_file, $vars, $output)
    or die $template->error();
close $input_file;

# articles index.html
$$vars{pages} = \@articles; # include all articles

$input = File::Spec::Functions::catfile($article_dir_name, 'index.html');
$output = $input;

open my $article_input_file, '<', $input;
$template->process($article_input_file, $vars, $output)
    or die $template->error();
close $article_input_file;

# process article templates
for my $article (@articles) {
    my $article_path = %$article{url};
    my $index = %$article{index};
    my $title = %$article{title};

    open my $article_file, '<', $index
        or die "can't open $index: $!";

    my $vars = {
        title => "$root_title . $title",
    };

    $template->process($article_file, $vars, $index)
        or die $template->error();

    close $article_file;
}

&build_redirects;
&build_rss(\@articles, 10);

# copy article assets
system './copy-page-assets', $output_dir;

sub directories_in {
    my ($dir_name) = @_;
    my @dirs;

    opendir my $dir, $dir_name
        or die "can't open $dir_name: $!";

    foreach my $dir (readdir $dir) {
        next if $dir eq '.' || $dir eq '..';

        my $this_dir = File::Spec::Functions::catdir($dir_name, $dir);

        push @dirs, $this_dir if -d $this_dir;
    }

    closedir $dir;

    @dirs
}

sub find_pages {
    my ($dirs_to_check) = @_;

    my @articles;

    foreach my $article_path (@$dirs_to_check) {
        opendir my $article_dir, $article_path
            or die "can't open $article_path: $!";

        foreach my $file (readdir $article_dir) {
            next unless $file eq 'index.html';

            my $article_index = File::Spec::Functions::catfile($article_path, $file);

            my %metadata = &page_metadata($article_index, 'h2');

            my %page = (
                url   => $article_path,
                title => $metadata{title} || $article_path,
                date  => $metadata{date} || time,
                date_str => $metadata{date_str},
                summary => $metadata{summary},
                index => $article_index,
            );
            push @articles, \%page; 
        }

        closedir $article_dir;
    }

    reverse sort { $$a{date} <=> $$b{date} } @articles
}

sub page_metadata {
    my ($page_path, $tag) = @_;

    local $/;

    open my $page, '<', $page_path
        or die "can't open $page_path: $!";

    my $contents = <$page>;
    
    close $page;

    my %metadata;

    # this regex feels stupid
    if ($contents =~ m|<\s*$tag[^>]*>\s*(.*?)\s*<\s*/\s*$tag\s*>|s) {
        $metadata{title} = $1;
    }

    # this one's even worse
    if ($contents =~ m|<\s*(\w+)[^>]*id\s*=\s*"time"[^>]*>\s*(\d+)[-/](\d+)[-/](\d+)\s*<\s*/\s*\1\s*>|s) {
        $metadata{date_str} = sprintf "%04d/%02d/%02d", $2, $3, $4;
        $metadata{date} = timelocal(0, 0, 0, $4, $3 - 1, $2);
    }

    if ($contents =~ m|<\s*p[^>]*id\s*=\s*"summary"[^>]*>\s*(.*?)\s*<\s*/\s*p\s*>|s) {
        $metadata{summary} = $1;
    } elsif ($contents =~ m|<\s*p(?!\s*id\s*=\s*"time")[^>]*>\s*(.*?)\s*<\s*/\s*p\s*>|s) {
        $metadata{summary} = $1;
    }

    %metadata
}

sub build_redirects {
    my $config = {
        INCLUDE_PATH => "$project_root/templates",
        OUTPUT_PATH  => "$project_root/$output_dir",
        POST_CHOMP   => 1,
    };

    my $template = Template->new($config);

    open my $redirect_file, '<', File::Spec::Functions::catfile($project_root, 'redirects.txt')
        or die "can't open redirects.txt: $!";

    while (<$redirect_file>) {
        next unless $_ =~ /^\s*"([^"]+)"\s+"([^"]+)"\s*$/;
        my ($redirect_from, $redirect_to) = ($1, $2);

        my $vars = {
            title => $root_title,
            redirect_to => $redirect_to,
        };

        $template->process('redirect', $vars, File::Spec::Functions::catfile($redirect_from, 'index.html'))
            or die $template->error();
    }

    close $redirect_file;
}

sub build_rss {
    my ($articles, $max_articles) = @_;

    my $rss = XML::RSS->new(version => '2.0');
    $rss->channel(title         => $root_title,
                  link          => $root_url,
                  language      => 'en',
                  description   => 'Personal homepage for Corey Beres. Mostly thoughts about software and skateboards.',
                  copyright     => 'Copyright 2024 Corey Beres',
                  pubDate       => &format_rfc_822(DateTime->from_epoch(epoch => $articles->[0]->{date})),
                  lastBuildDate => &format_rfc_822(DateTime->now),
    );

    $rss->image(title       => $root_title,
                url         => "$root_url/favicon.png",
                link        => $root_url,
                width       => 72,
                height      => 72,
                description => "$root_title feed icon",
    );

    for my $article (@$articles[0..min($max_articles - 1, $#$articles)]) {
        $rss->add_item(title       => $article->{title},
                       # creates a guid field with permaLink=true
                       permaLink   => "$root_url/$article->{url}",
                       pubDate     => &format_rfc_822(DateTime->from_epoch(epoch => $article->{date})),
                       description => $article->{summary},
        );
    }

    $rss->save("$project_root/$output_dir/rss.xml");
}

sub format_rfc_822 {
    my ($dt) = @_;
    DateTime::Format::Mail->format_datetime($dt)
}
