#!/usr/bin/env perl

use 5.034;
use if !$ENV{GITHUB_WORKSPACE}, "local::lib";
use File::Spec::Functions ();
use Template;
use Time::Local qw( timelocal );

my $project_root = $ENV{GITHUB_WORKSPACE} || "$ENV{HOME}/repos/cberes.com";

my $output_dir = $ARGV[0] || '_site';

my $config = {
    INCLUDE_PATH => "$project_root/templates",  # or list ref
    OUTPUT_PATH  => "$project_root/$output_dir",
    INTERPOLATE  => 1,               # expand "$var" in plain text
    POST_CHOMP   => 1,               # cleanup whitespace
    PRE_PROCESS  => 'header',        # prefix each template
    POST_PROCESS => 'footer',        # append after each template
    EVAL_PERL    => 1,               # evaluate Perl code blocks
};

# create Template object
my $template = Template->new($config);

# find articles
my @article_dirs = &directories_in('articles');
my @articles = &find_pages(\@article_dirs);

# define template variables for replacement
my $root_title = 'cberes';
my $vars = {
    title => $root_title,
    pages => \@articles,
};

# specify input filename, or file handle, text reference, etc.
my $input = 'index.html';
my $output = $input;

# process input template, substituting variables
open my $input_file, '<', $input;
$template->process($input_file, $vars, $output)
    or die $template->error();
close $input_file;

# process article templates
for my $article (@articles) {
    my $article_path = %$article{url};
    my $index = %$article{index};
    my $title = %$article{title};

    open my $article_file, '<', $index
        or die "can't open $index: $!";

    my $vars = {
        title => "$root_title | $title",
    };

    $template->process($article_file, $vars, $index)
        or die $template->error();

    close $article_file;
}

# copy article assets
system './copy-page-assets', $output_dir;

sub directories_in {
    my ($dir_name) = @_;
    my @dirs;

    opendir my $dir, $dir_name
        or die "can't open $dir_name: $!";

    foreach my $dir (readdir $dir) {
        next if $dir eq '.' || $dir eq '..';

        my $this_dir = File::Spec::Functions::catdir($dir_name, $dir);

        push @dirs, $this_dir if -d $this_dir;
    }

    closedir $dir;

    @dirs
}

sub find_pages {
    my ($dirs_to_check) = @_;

    my @articles;

    foreach my $article_path (@$dirs_to_check) {
        opendir my $article_dir, $article_path
            or die "can't open $article_path: $!";

        foreach my $file (readdir $article_dir) {
            next unless $file eq 'index.html';

            # TODO add index.html for template processing
            my $article_index = File::Spec::Functions::catfile($article_path, $file);

            my %metadata = &page_metadata($article_index, 'h2');

            my %page = (
                url   => $article_path,
                title => $metadata{title} || $article_path,
                date  => $metadata{date} || time,
                index => $article_index,
            );
            push @articles, \%page; 
        }

        closedir $article_dir;
    }

    reverse sort { $$a{date} <=> $$b{date} } @articles
}

sub page_metadata {
    my ($page_path, $tag) = @_;

    local $/;

    open my $page, '<', $page_path
        or die "can't open $page_path: $!";

    my $contents = <$page>;
    
    close $page;

    my %metadata;

    # this regex feels stupid
    if ($contents =~ m|<\s*$tag[^>]*>\s*(.*?)\s*<\s*/\s*$tag\s*>|s) {
        $metadata{title} = $1;
    }

    # this one's even worse
    if ($contents =~ m|<\s*(\w+)[^>]*id\s*=\s*"time"[^>]*>\s*(\d+)[-/](\d+)[-/](\d+)\s*<\s*/\s*\1\s*>|s) {
        $metadata{date} = timelocal(0, 0, 0, $4, $3 - 1, $2);
    }

    %metadata
}
